---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check if GitLab Runner is already installed.
  stat:
    path: "/usr/bin/gitlab-runner"
  register: gitlab_runner_file

- name: Download GitLab repository installation script.
  get_url:
    url: "{{ gitlab_runner_repository_installation_script_url }}"
    dest: /tmp/gitlab_runner_install_repository.sh
    validate_certs: "{{ gitlab_runner_download_validate_certs }}"
  when: gitlab_runner_file.stat.exists == false

- name: Install GitLab Runner repository.
  command: bash /tmp/gitlab_runner_install_repository.sh
  when: gitlab_runner_file.stat.exists == false

- name: Define the Gitlab Runner package name.
  set_fact:
    gitlab_runner_package_name: "{{ gitlab_runner_base_package_name }}{{ gitlab_runner_package_version_separator }}{{ gitlab_runner_version }}"
  when: gitlab_runner_version != ''

- name: Install GitLab Runner.
  package:
    name: "{{ gitlab_runner_package_name | default(gitlab_runner_base_package_name) }}"
    state: installed
  when: gitlab_runner_file.stat.exists == false

- name: Create the Gitlab Runner configuration directory.
  file:
    path: "{{ gitlab_runner_conf_dir }}"
    state: directory
    owner: "{{ gitlab_runner_conf_dir_owner }}"
    group: "{{ gitlab_runner_conf_dir_group }}"
    mode: "{{ gitlab_runner_conf_dir_mode }}"

# - name: Check if the Gitlab API is accessable.
#   uri:
#     url: '{{ gitlab_runner_gitlab_url }}'
#   register: gitlab_runner_api_check
#   when: gitlab_runner_gitlab_url | default()
#   failed_when: false
#   # no_log: true

# - name: List all current runners
#   uri:
#     url: "{{ gitlab_runner_gitlab_url }}/api/v4/runners/all"
#     method: "GET"
#     headers:
#       "PRIVATE-TOKEN": "{{ gitlab_runner_api_key }}"
#   register: gitlab_runners_known
# - debug:
#     msg: "{{ gitlab_runners_known.json }}"

## This is based on the debops gitlab-runner role. It doesn't seem to work, though.
# - name: Register new Gitlab Runners.
#   uri:
#     url: "{{ item.gitlab_url | default(gitlab_runner_gitlab_url) }}/api/v4/runners"
#     method: "POST"
#     body: "token={{ item.token | default(gitlab_runner_token) }}&
#       description={{ item.name | urlencode }}&
#       tag_list={{ item.tags | default([]) | unique | join(\",\") | urlencode }}&
#       run_untagged={{ item.run_untagged | default(false) }}"
#     status_code: "200,201"
#   with_items: "{{ gitlab_runners }}"

- name: Deregister all runners.
  shell: >
    gitlab-runner unregister --all-runners
  become: yes

- name: Verify all runners deleted.
  shell: >
    gitlab-runner verify --delete
  become: yes

- name: Register new runners using the gitlab-runner command.
  shell: >
    gitlab-runner register --non-interactive
    --url "{{ item.url | default(gitlab_runner_coordinator_url) }}"
    --registration-token {{ item.token | default(gitlab_runner_token) }}
    --name "{{ item.name }}"
    --tag-list "{{ item.tags | default([]) | join(',') }}"
    {% if item.builds_dir | default('') != '' %}
    --builds-dir {{ item.builds_dir }}
    {% endif %}
    {% if item.executor == "ssh" %}
    --executor ssh
    --ssh-host {{ item.ssh_host }}
    --ssh-port {{ item.ssh_port | default('22') }}
    --ssh-user {{ item.ssh_user }}
    {% if (item.ssh_identity_file is defined) or (gitlab_runner_ssh_identity_file) %}
    --ssh-identity-file "{{ item.ssh_identity_file | default(gitlab_runner_ssh_identity_file) }}"
    {% else %}
    --ssh-password "{{ item.ssh_password | default() }}"
    {% endif %}
    {% else %}
    --executor shell
    {% endif %}
  with_items: "{{ gitlab_runners }}"
  become: yes

# - name: Create the Gitlab Runner config.toml file.
#   template:
#     src: "templates/config.toml.j2"
#     dest: "{{ gitlab_runner_conf_file }}"
#     owner: "{{ gitlab_runner_conf_file_owner }}"
#     group: "{{ gitlab_runner_conf_file_group }}"
#     mode: "{{ gitlab_runner_conf_file_mode }}"
#   notify:
#     - restart gitlab runner

# - name: Verify configuration and delete old runners.
#   shell: >
#     gitlab-runner verify --delete
#   become: yes
#   when: gitlab_runner_verify_with_delete == true

# - name: Delete any runners with state=absent.
#   uri:
#     url: "{{ item.gitlab_url | default(gitlab_runner_gitlab_url) }}/api/v4/runners/{{ item.id | string }}"
#     method: "DELETE"
#     headers:
#       "PRIVATE-TOKEN": "{{ gitlab_runner_api_key }}"
#   with_items: "{{ gitlab_runners }}"
#   when:
#     - gitlab_runner_api_key is defined
#     - item.state is defined
#     - item.state == 'absent'
#     - item.id is defined
#   failed_when: False
#   no_log: True
